spring.security.user.password=password

# Database configuration props
spring.datasource.url=jdbc:mysql://localhost:3306/lottery?createDatabaseIfNotExist=true
spring.datasource.username=lottery
spring.datasource.password=lottery
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
 
# Hibernate props
spring.jpa.show-sql=true
#spring.jpa.hibernate.ddl-auto=none
spring.jpa.hibernate.ddl-auto=update
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL5InnoDBDialect
 
# Social login provider props
#spring.security.oauth2.client.registration.google.clientId=<your-client-id>
#spring.security.oauth2.client.registration.google.clientSecret=<your-client-secret>
spring.security.oauth2.client.registration.facebook.clientId=231948902006780
spring.security.oauth2.client.registration.facebook.clientSecret=621f1ef3359bdd51a3fe6eee6a106923
spring.security.oauth2.client.provider.facebook.user-info-uri=https://graph.facebook.com/me?fields=id,name,email,picture
#spring.security.oauth2.client.registration.github.clientId=<your-client-id>
#spring.security.oauth2.client.registration.github.clientSecret=<your-client-secret>
#spring.security.oauth2.client.registration.linkedin.clientId=<your-client-id>
#spring.security.oauth2.client.registration.linkedin.clientSecret=<your-client-secret>
#spring.security.oauth2.client.registration.linkedin.client-authentication-method=post
#spring.security.oauth2.client.registration.linkedin.authorization-grant-type=authorization_code
#spring.security.oauth2.client.registration.linkedin.scope=r_liteprofile, r_emailaddress
#spring.security.oauth2.client.registration.linkedin.redirect-uri={baseUrl}/login/oauth2/code/{registrationId}
#spring.security.oauth2.client.registration.linkedin.client-name=Linkedin
#spring.security.oauth2.client.registration.linkedin.provider=linkedin
#spring.security.oauth2.client.provider.linkedin.authorization-uri=https://www.linkedin.com/oauth/v2/authorization
#spring.security.oauth2.client.provider.linkedin.token-uri=https://www.linkedin.com/oauth/v2/accessToken
#spring.security.oauth2.client.provider.linkedin.user-info-uri=https://api.linkedin.com/v2/me
#spring.security.oauth2.client.provider.linkedin.user-name-attribute=id
#linkedin.email-address-uri=https://api.linkedin.com/v2/emailAddress?q=members&projection=(elements*(handle~))
 
 
app.auth.tokenSecret=926D96C90030DD58429D2751AC1BDBBC
app.auth.tokenExpirationMsec=864000000
    # After successfully authenticating with the OAuth2 Provider,
    # we'll be generating an auth token for the user and sending the token to the
    # redirectUri mentioned by the frontend client in the /oauth2/authorization request.
    # We're not using cookies because they won't work well in mobile clients.
#app.oauth2.authorizedRedirectUris=http://localhost:8080/oauth2/redirect
app.oauth2.authorizedRedirectUris=http://localhost:4200/login
# For detailed logging during development
#logging.level.com=TRACE
logging.level.org.springframework=INFO
#logging.level.org.hibernate.SQL=TRACE
#logging.level.org.hibernate.type=TRACE

#for gmail sender mail
#https://support.google.com/mail/answer/7104828?hl=en&rd=3&visit_id=637557445758719164-1347905503
spring.mail.host=smtp.gmail.com
spring.mail.port=587
spring.mail.username=victor.ivan.cruzg@gmail.com
spring.mail.password=Cerouno02
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true

spring.mail.properties.mail.smtp.connectiontimeout=5000
spring.mail.properties.mail.smtp.timeout=5000
spring.mail.properties.mail.smtp.writetimeout=5000
